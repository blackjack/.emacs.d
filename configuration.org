#+TITLE My Emacs configuration

* Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]] for some basic settings.

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
  (sensible-defaults/backup-to-temp-directory)
#+END_SRC


* Set personal information
** Who am I? Where am I?

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Oleksandr Senkovych"
        user-mail-address "bjsenya@gmail.com"
        calendar-latitude 52.379
        calendar-longitude 4.899
        calendar-location-name "Amsterdam, Netherlands")
#+END_SRC


* Basic package management setup
** Setup packages.el

#+BEGIN_SRC emacs-lisp
	;;; Load emacs builtin package manager
	;;; Load packages both from marmalade and melpa
	(require 'package)
	(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
	(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))

	(setq package-enable-at-startup nil)
	(package-initialize)
#+END_SRC

** Setup use-package

#+BEGIN_SRC emacs-lisp
	(unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))

	(eval-when-compile
	(require 'use-package))
#+END_SRC


* Evil mode

#+BEGIN_SRC emacs-lisp

(use-package evil
  :ensure t
  :init
  (progn
    ;; if we don't have this evil overwrites the cursor color
    (setq evil-default-cursor t)
    ;; This has to be before we invoke evil-mode
    (use-package evil-leader
      :ensure t
      :init (global-evil-leader-mode)
      ;; boot evil by default
      (evil-mode 1)
    )
	)
  :config
  (progn
    ;; use ido to open files
    (define-key evil-ex-map "e " 'ido-find-file)
    (define-key evil-ex-map "b " 'ido-switch-buffer)

    ;; jj escapes to normal mode
    (define-key evil-insert-state-map (kbd "j") 'bw-evil-escape-if-next-char-is-j)
    (setq
     ;; h/l wrap around to next lines
     evil-cross-lines t)

    ;; esc should always quit: http://stackoverflow.com/a/10166400/61435
    (define-key evil-normal-state-map [escape] 'keyboard-quit)
    (define-key evil-visual-state-map [escape] 'keyboard-quit)
    (define-key minibuffer-local-map [escape] 'abort-recursive-edit)
    (define-key minibuffer-local-ns-map [escape] 'abort-recursive-edit)
    (define-key minibuffer-local-completion-map [escape] 'abort-recursive-edit)
    (define-key minibuffer-local-must-match-map [escape] 'abort-recursive-edit)
    (define-key minibuffer-local-isearch-map [escape] 'abort-recursive-edit)

    ;; modes to map to different default states
    (dolist (mode-map '((comint-mode . emacs)
                        (term-mode . emacs)
                        (eshell-mode . emacs)
                        (help-mode . emacs)
                        (fundamental-mode . emacs)))
      (evil-set-initial-state `,(car mode-map) `,(cdr mode-map)))))

(provide 'init-evil)

#+END_SRC


* Setting up Helm

#+BEGIN_SRC emacs-lisp

(use-package helm
    :ensure t
    :diminish helm-mode
    :config
    (require 'helm-config)
    (helm-mode)
    :bind (("M-x" . helm-M-x))
    :bind (:map helm-map
	("C-k" . helm-previous-line)
	("C-j" . helm-next-line)
	("C-u" . helm-previous-page)
	("C-d" . helm-next-page)
    )
)

#+END_SRC

* Org mode settings

#+BEGIN_SRC emacs-lisp

;; fontify code in code blocks
(setq org-src-fontify-natively t)
;; indent code in source blocks
(setq org-src-tab-acts-natively t)

#+END_SRC

* Leader key shortcuts

#+BEGIN_SRC emacs-lisp
    (setq evil-leader/in-all-states t)
;;Set leader to comma
    (setq evil-leader/leader ",")

    (evil-leader/set-key
	    "a" 'ag-project
	    "A" 'ag
	    "b" 'ido-switch-buffer
	    "c" 'mc/mark-next-like-this
	    "C" 'mc/mark-all-like-this
	    "e" 'er/expand-region
	    "E" 'mc/edit-lines
	    "f" 'ido-find-file
	    "g" 'magit-status
	    "i" 'idomenu
	    "j" 'ace-jump-mode
	    "k" 'kill-buffer
	    "K" 'kill-this-buffer
	    "o" 'occur
	    "p" 'magit-find-file-completing-read
	    "r" 'recentf-ido-find-file
	    "s" 'ag-project
	    "t" 'bw-open-term
	    "T" 'eshell
	    "w" 'save-buffer
	    "x" 'smex
	    )
#+END_SRC
